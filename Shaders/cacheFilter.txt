Texture2D<float4> SrcTexture : register(t0);
Texture2D<float4> g_worldpos : register(t1);
Texture2D<float4> g_normal : register(t2);
StructuredBuffer<int2> g_offsets : register(t3);
StructuredBuffer<float> g_h : register(t4);
Texture2D<float4> g_z : register(t5);
Texture2D<float4> g_gz : register(t6);
RWTexture2D<float4> DstTexture : register(u0);
RWTexture2D<float4> moment1tex : register(u1);
RWTexture2D<float4> moment2tex : register(u2);
RWTexture2D<float4> historytex : register(u3);
RWTexture2D<float4> variancetex : register(u4);
SamplerState g_sampler : register(s0);
#define width 1024
#define height 768
cbuffer lastVP : register(b0)
{
    float4x4 lastVP;
    float4x4 last6VP;
    uint nframe;
    uint filterNote;
}
#define groupsize 256
groupshared float4 colorcache[groupsize + 64];
groupshared float4 normalcache[groupsize +64];
groupshared float4 variancecache[groupsize + 64];
float3 calcJBFWeight(int i,int j,float3 variance)
{
    float InvSigmaRT = 1.0f/500.0f;
    float SigmaN = 128.0f;
    //float InvSigmaZ = 1.0f/60.0f;
    float3 eRT = length(colorcache[i].xyz - colorcache[j].xyz) * InvSigmaRT / (sqrt(variance) + float3(0.001, 0.001, 0.001));
    float wN = pow(max(0, dot(normalcache[i].xyz * 2.0f - 1.0f, normalcache[j].xyz * 2.0f - 1.0f)), SigmaN);
    //float eZ = length(g_z[i*2].x - g_z[j*2].x) * InvSigmaZ / (length(g_gz[i*2].x * (i - j)) + float3(0.001,0.001,0.001));
    return wN* exp(-eRT);
}

[numthreads(groupsize, 1, 1)]
void CSX(uint2 GroupId : SV_GroupID,
				 uint2 GroupThreadID : SV_GroupThreadID,
				 uint2 DispatchThreadId : SV_DispatchThreadID)
{
    int r = pow(2, filterNote + 1);
    if (GroupThreadID.x < r)
    {
        int x = max(0, DispatchThreadId.x - r);
        colorcache[GroupThreadID.x] = SrcTexture[int2(x, DispatchThreadId.y)];
        normalcache[GroupThreadID.x] = g_normal[int2(x, DispatchThreadId.y)];
        variancecache[GroupThreadID.x] = variancetex[int2(x, DispatchThreadId.y)];
    }
    if (GroupThreadID.x > groupsize - r-1)
    {
        int x = min(width - 1, DispatchThreadId.x + r);
        colorcache[GroupThreadID.x + 2*r] = SrcTexture[int2(x, DispatchThreadId.y)];
        normalcache[GroupThreadID.x + 2*r] = g_normal[int2(x, DispatchThreadId.y)];
        variancecache[GroupThreadID.x + 2*r] = variancetex[int2(x, DispatchThreadId.y)];
    }
    colorcache[GroupThreadID.x + r] = SrcTexture[DispatchThreadId];
    normalcache[GroupThreadID.x + r] = g_normal[DispatchThreadId];
    variancecache[GroupThreadID.x + r] = variancetex[DispatchThreadId];
    GroupMemoryBarrierWithGroupSync(); //等待所有线程为cache赋值
    int currentIndex = GroupThreadID.x + r;
    int offset = pow(2, filterNote);
    float3 totalColorWeight = float3(0,0,0);
    float3 totalVarianceWeight = float3(0,0,0);
    float3 totalColor = float3(0, 0, 0);
    float3 totalVariance = float3(0, 0, 0);
    float3 currentVariance = variancecache[currentIndex].xyz;
    for (int i = -2; i < 3; i++)
    {
        int sideIndex = i*offset + currentIndex;
        float3 w = calcJBFWeight(currentIndex, sideIndex, currentVariance);
        float h = g_h[i+2];
        float3 weight = h*w;
        totalColor += weight * colorcache[sideIndex].xyz;
        totalVariance += weight * weight * variancecache[sideIndex].xyz;
        totalColorWeight += weight;
        totalVarianceWeight += weight * weight;
    }
    totalColor /= totalColorWeight;
    totalVariance /= totalVarianceWeight;
    DstTexture[DispatchThreadId] = float4(totalColor, 1.0f);
    variancetex[DispatchThreadId] = float4(totalVariance, 1.0f);
}
[numthreads(1, groupsize, 1)]
void CSY(uint2 GroupId : SV_GroupID,
				 uint2 GroupThreadID : SV_GroupThreadID,
				 uint2 DispatchThreadId : SV_DispatchThreadID)
{
    int r = pow(2, filterNote + 1);
    if (GroupThreadID.y < r)
    {
        int y = max(0, DispatchThreadId.y - r);
        colorcache[GroupThreadID.y] = SrcTexture[int2(DispatchThreadId.x,y)];
        normalcache[GroupThreadID.y] = g_normal[int2(DispatchThreadId.x, y)];
        variancecache[GroupThreadID.y] = variancetex[int2(DispatchThreadId.x, y)];
    }
    if (GroupThreadID.y > groupsize - r - 1)
    {
        int y = min(height - 1, DispatchThreadId.y + r);
        colorcache[GroupThreadID.y + 2 * r] = SrcTexture[int2(DispatchThreadId.x, y)];
        normalcache[GroupThreadID.y + 2 * r] = g_normal[int2(DispatchThreadId.x, y)];
        variancecache[GroupThreadID.y + 2 * r] = variancetex[int2(DispatchThreadId.x, y)];
    }
    colorcache[GroupThreadID.y + r] = SrcTexture[DispatchThreadId];
    normalcache[GroupThreadID.y + r] = g_normal[DispatchThreadId];
    variancecache[GroupThreadID.y + r] = variancetex[DispatchThreadId];
    GroupMemoryBarrierWithGroupSync(); //等待所有线程为cache赋值
    int currentIndex = GroupThreadID.y + 2;
    int offset = pow(2, filterNote);
    float3 totalColorWeight = float3(0, 0, 0);
    float3 totalVarianceWeight = float3(0, 0, 0);
    float3 totalColor = float3(0, 0, 0);
    float3 totalVariance = float3(0, 0, 0);
    float3 currentVariance = variancecache[currentIndex].xyz;
    for (int i = -2; i < 3; i++)
    {
        int sideIndex = i*offset + currentIndex;
        float3 w = calcJBFWeight(currentIndex, sideIndex, currentVariance);
        float h = g_h[i + 2];
        float3 weight = h * w;
        totalColor += weight * colorcache[sideIndex].xyz;
        totalVariance += weight * weight * variancecache[sideIndex].xyz;
        totalColorWeight += weight;
        totalVarianceWeight += weight * weight;
    }
    totalColor /= totalColorWeight;
    totalVariance /= totalVarianceWeight;
    DstTexture[DispatchThreadId] = float4(totalColor, 1.0f);
    variancetex[DispatchThreadId] = float4(totalVariance, 1.0f);
}